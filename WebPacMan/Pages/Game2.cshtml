@page
@using PacMan
@model Game2Model

<style>
    .map {
        grid-template-columns: max-content repeat(@Model.SimulationHistory.SizeX, max-content);
        grid-template-rows: repeat(@Model.SimulationHistory.SizeY, 1fr) max-content;
    }
</style>

<container class="map-container">
    <div class="map-header">
        <form method="post" asp-page-handler="ChangeTurn">
            <input type="hidden" name="turn" value="@Model.CurrentTurn" />
            <button class="button" name="direction" value="prev" @(Model.CurrentTurn == 0 ? "disabled" : "")>◀</button>
        </form>

        <div class="turn">Tura: @Model.CurrentTurn</div>

        <form method="post" asp-page-handler="ChangeTurn">
            <input type="hidden" name="turn" value="@Model.CurrentTurn" />
            <button class="button" name="direction" value="next" @(Model.CurrentTurn == Model.MaxTurn ? "disabled" : "")>▶</button>
        </form>
    </div>

    <div class="map">
        @for (int y = Model.SimulationHistory.SizeY - 1; y >= 0; y--)
        {
            <a class="number">@y</a>
            @for (int x = 0; x < Model.SimulationHistory.SizeX; x++)
            {
                var position = new Point(x, y);
                var symbol = Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Symbols.ContainsKey(position) ?
                Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Symbols[position]
                : (Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Walls.ContainsKey(position)
                ? Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Walls.FirstOrDefault().Value.Symbol
                : (Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Coins.ContainsKey(position)
                ? Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Coins.FirstOrDefault().Value.Symbol
                : ' '));


                <div class="cell">

                    @if (symbol == 'P')
                    {
                        <img class="pacman @(Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Move.ToString().ToLower())" src="/Symbols/P.gif" alt="Pacman">
                    }
                    else
                    {
                        <img class="symbol" src="/Symbols/@(symbol).gif" alt="">
                    }

                </div>
            }
        }
        <a class="number">X</a>
        @for (int x = 0; x < Model.SimulationHistory.SizeX; x++)
        {
            <a class="number">@x</a>
        }
    </div>

    <div class="map-header">
        @if (Model.CurrentTurn == 0)
        {
            <span class="alert">READY?!</span>
        }
        else
        {
            <span class="alert">SCORE: @Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Score  HP: @Model.SimulationHistory.TurnLogs[Model.CurrentTurn].HP</span>
        }
    </div>

    <div class="debug-info">
        <h3>Debug Information - Symbols and Positions</h3>
        <table>
            <thead>
                <tr>
                    <th>Position</th>
                    <th>Symbol</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var symbolEntry in Model.SimulationHistory.TurnLogs[Model.CurrentTurn].Symbols)
                {
                    <tr>
                        <td>@symbolEntry.Key</td>
                        <td>@symbolEntry.Value</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</container>
